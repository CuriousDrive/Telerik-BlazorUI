@page "/books"
@using BookStores.Models
@using Telerik.DataSource
@inject HttpClient _httpClient

<div class="col-12">

    @if (BookList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <TelerikButton @onclick="SortBySales">Sort By Sales</TelerikButton>
        <br /><br />
        <TelerikTextBox @bind-Value="Title" PlaceHolder="Title"></TelerikTextBox>
        <TelerikTextBox @bind-Value="AuthorName" PlaceHolder="Author Name"></TelerikTextBox>
        <TelerikButton @onclick="FilterByTitleAndAuthor">Filter By Title And Author</TelerikButton>
        <br /><br />
        @if (SelectedBooks != null)
        {
            <strong>Selected Books : </strong>
            @foreach (Book book in SelectedBooks)
            {
                <span>@book.Title,&nbsp;</span>
            }
            <br />
        }
        <br />
        <TelerikGrid Data="BookList"
                     Resizable="true"
                     Reorderable="true"
                     Pageable="true"
                     PageSize="@UserPageSize"
                     @bind-Page="@CurrentPage"
                     Sortable="true"
                     @ref="BooksGrid"
                     FilterMode="@GridFilterMode.FilterMenu"
                     OnDelete="DeleteBook"
                     EditMode="@GridEditMode.Inline"
                     OnUpdate="UpdateBook"
                     OnCreate="CreateBook"
                     Groupable="true"
                     SelectionMode="GridSelectionMode.Multiple"
                     SelectedItemsChanged="@((IEnumerable<Book> books) => SelectedItemsChangedHandler(books))">
            <GridToolBar>
                <GridCommandButton Command="Add" Icon="add">Add</GridCommandButton>
                <GridCommandButton Command="ExcelExport" Icon="@IconName.FileExcel">Export to Excel</GridCommandButton>
            </GridToolBar>
            <GridExport>
                <GridExcelExport FileName="@("Books_" + DateTime.Now.ToShortDateString())" AllPages="true"></GridExcelExport>
            </GridExport>
            <GridColumns>
                <GridCheckboxColumn SelectAllMode="GridSelectAllMode.All"></GridCheckboxColumn>
                <GridColumn Field="@nameof(Book.Title)"></GridColumn>
                <GridColumn Field="@nameof(Book.AuthorName)" Title="Author Name"></GridColumn>
                <GridColumn Field="@nameof(Book.Type)">
                    <GroupHeaderTemplate>
                        <strong>Total Count : @context.Count</strong>
                    </GroupHeaderTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(Book.Price)">
                    <Template>
                        @((context as Book).Price.ToString("C2"))
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(Book.Sales)" Groupable="false">
                    <Template>
                        @((context as Book).Sales.ToString("N0"))
                    </Template>
                    <GroupFooterTemplate>
                        <strong>Total Sales : </strong>@context.Sum
                    </GroupFooterTemplate>
                </GridColumn>
                <GridCommandColumn>
                    <GridCommandButton Command="Save" Icon="save" ShowInEdit="true">Save</GridCommandButton>
                    <GridCommandButton Command="Cancel" Icon="cancel" ShowInEdit="true">Cancel</GridCommandButton>
                    <GridCommandButton Command="Edit" Icon="edit">Edit</GridCommandButton>
                    <GridCommandButton Command="Delete" Icon="delete">Delete</GridCommandButton>
                </GridCommandColumn>
            </GridColumns>
            <GridAggregates>
                <GridAggregate Field="@nameof(Book.Type)" Aggregate="GridAggregateType.Count"></GridAggregate>
                <GridAggregate Field="@nameof(Book.Sales)" Aggregate="GridAggregateType.Sum"></GridAggregate>
            </GridAggregates>
        </TelerikGrid>
    }
    <br /><br />
</div>

@code {

    //properties

    public Book Book { get; set; }
    public List<Book> BookList { get; set; }
    public int UserPageSize { get; set; }
    public int CurrentPage { get; set; }

    public string Title { get; set; } = "Of";
    public string AuthorName { get; set; } = "J.K.";

    public TelerikGrid<Book> BooksGrid { get; set; }
    public IEnumerable<Book> SelectedBooks { get; set; } = Enumerable.Empty<Book>();

    private void SelectedItemsChangedHandler(IEnumerable<Book> books)
    {
        SelectedBooks = books;
    }

    private void OnStateInitHandler(GridStateEventArgs<Book> gridStateEventArgs)
    {
        //sorting
        SortDescriptor sortDescriptor = new SortDescriptor();
        sortDescriptor.Member = "Sales";
        sortDescriptor.SortDirection = ListSortDirection.Descending;

        List<SortDescriptor> sortDescriptors = new List<SortDescriptor>();
        sortDescriptors.Add(sortDescriptor);

        GridState<Book> gridState = new GridState<Book>();
        gridState.SortDescriptors = sortDescriptors;

        //filtering
        List<FilterDescriptorBase> filterDescriptorBases = new List<FilterDescriptorBase>();
        filterDescriptorBases.Add(new FilterDescriptor() { Member = "Title", Operator = FilterOperator.Contains, Value = Title, MemberType = typeof(string) });

        gridState.FilterDescriptors = filterDescriptorBases;

        //grouping
        GroupDescriptor groupDescriptor = new GroupDescriptor();
        groupDescriptor.Member = "Type";
        groupDescriptor.MemberType = typeof(string);

        List<GroupDescriptor> groupDescriptors = new List<GroupDescriptor>();
        groupDescriptors.Add(groupDescriptor);

        gridState.GroupDescriptors = groupDescriptors;

        gridStateEventArgs.GridState = gridState;

    }

    private void SortBySales()
    {
        SortDescriptor sortDescriptor = new SortDescriptor();
        sortDescriptor.Member = "Sales";
        sortDescriptor.SortDirection = ListSortDirection.Descending;

        List<SortDescriptor> sortDescriptors = new List<SortDescriptor>();
        sortDescriptors.Add(sortDescriptor);

        GridState<Book> gridState = new GridState<Book>();
        gridState.SortDescriptors = sortDescriptors;

        BooksGrid.SetState(gridState);
    }

    private void FilterByTitleAndAuthor()
    {
        List<FilterDescriptorBase> filterDescriptorBases = new List<FilterDescriptorBase>();
        filterDescriptorBases.Add(new FilterDescriptor() { Member = "Title", Operator = FilterOperator.Contains, Value = Title, MemberType = typeof(string) });
        filterDescriptorBases.Add(new FilterDescriptor() { Member = "AuthorName", Operator = FilterOperator.Contains, Value = AuthorName, MemberType = typeof(string) });

        GridState<Book> gridState = new GridState<Book>();
        gridState.FilterDescriptors = filterDescriptorBases;

        BooksGrid.SetState(gridState);
    }

    //Component Events
    protected override async Task OnInitializedAsync()
    {
        Book = new Book();
        BookList = await GetBooks();

        UserPageSize = await GetUserPageSize();

        await base.OnInitializedAsync();
    }

    private async Task<List<Book>> GetBooks()
    {
        List<Book> BookList = await _httpClient.GetFromJsonAsync<List<Book>>("Books/getBooks");

        if (BookList != null)
            BookList = BookList.OrderByDescending(auth => auth.BookId).ToList();

        return BookList;
    }

    private async Task CreateBook(GridCommandEventArgs gridCommandEventArgs)
    {
        var book = gridCommandEventArgs.Item as Book;
        await _httpClient.PostAsJsonAsync<Book>("Books/createBook", book);
        BookList = await GetBooks();
    }

    private async Task UpdateBook(GridCommandEventArgs gridCommandEventArgs)
    {
        var book = gridCommandEventArgs.Item as Book;
        await _httpClient.PutAsJsonAsync<Book>("Books/UpdateBook/" + book.BookId, book);
        BookList = await GetBooks();
    }

    private async Task DeleteBook(GridCommandEventArgs gridCommandEventArgs)
    {
        var book = gridCommandEventArgs.Item as Book;
        await _httpClient.DeleteAsync("Books/DeleteBook/" + book.BookId);
        BookList = await GetBooks();
    }

    private async Task<int> GetUserPageSize()
    {
        return await Task.FromResult<int>(10);
    }
}