@page "/convertdocuments"

@using System;
@using System.IO;
@using DocumentProcessing.Models
@using DocumentProcessing.Utilities
@using System.Text.RegularExpressions;
@using Telerik.Windows.Documents.Flow.Model;
@using Telerik.Windows.Documents.Flow.FormatProviders.Docx;
@using Telerik.Windows.Documents.Common.FormatProviders;
@using Telerik.Windows.Documents.Flow.FormatProviders.Html;
@using Telerik.Windows.Documents.Flow.FormatProviders.Rtf;
@using Telerik.Windows.Documents.Flow.FormatProviders.Txt;
@using Telerik.Windows.Documents.Flow.FormatProviders.Pdf;
@inject IJSRuntime JsRuntime

<div class="demo-section">

    <label class="demo-spacing">Convert from:</label>
    <FileSelector ID="uploadInput" Accept=".docx, .rtf, .html, .txt" @bind-FileDetails="fileDetails" />
    <label class="demo-spacing">Select .docx, .rtf, .html or .txt file formats</label>
    <br />
    <br />
    <label class="demo-spacing">Convert to:</label>
    <TelerikDropDownList Data="@Formats" @bind-Value="@SelectedFormat" PopupHeight="" Width="180px">
    </TelerikDropDownList>
    <hr class="clear" />
    <TelerikButton Icon="save" Primary="true" OnClick="@DownloadHandler" Enabled='@(!string.IsNullOrEmpty(fileDetails.Name))' Class="demo-button">Convert and Download</TelerikButton>
</div>

@code {

    FileDetails fileDetails = new FileDetails();
    string SelectedFormat = "DOCX";
    string mimeType;
    string[] Formats = { "DOCX", "RTF", "HTML", "TXT", "PDF" };

    private void DownloadHandler()
    {
        byte[] newFileData = GenerateFile();
        FileExporter.Save(JsRuntime, newFileData, mimeType, String.Format("{0}." + SelectedFormat.ToLowerInvariant(), Path.GetFileNameWithoutExtension(fileDetails.Name)));
    }

    private byte[] GenerateFile()
    {
        IFormatProvider<RadFlowDocument> convertFromFormatProvider = null;
        IFormatProvider<RadFlowDocument> convertToFormatProvider = null;

        switch (Path.GetExtension(fileDetails.Name))
        {
            case ".docx":
                convertFromFormatProvider = new DocxFormatProvider();
                break;
            case ".rtf":
                convertFromFormatProvider = new RtfFormatProvider();
                break;
            case ".html":
                convertFromFormatProvider = new HtmlFormatProvider();
                break;
            case ".txt":
                convertFromFormatProvider = new TxtFormatProvider();
                break;
            default:
                convertFromFormatProvider = null;
                break;
        }

        switch (SelectedFormat.ToLowerInvariant())
        {
            case "docx":
                convertToFormatProvider = new DocxFormatProvider();
                mimeType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
                break;
            case "rtf":
                convertToFormatProvider = new RtfFormatProvider();
                mimeType = "application/rtf";
                break;
            case "html":
                convertToFormatProvider = new HtmlFormatProvider();
                mimeType = "text/html";
                break;
            case "txt":
                convertToFormatProvider = new TxtFormatProvider();
                mimeType = "text/plain";
                break;
            case "pdf":
                convertToFormatProvider = new PdfFormatProvider();
                mimeType = "application/pdf";
                break;
            default:
                convertToFormatProvider = new TxtFormatProvider();
                mimeType = "text/plain";
                break;
        }

        RadFlowDocument document = null;

        using (MemoryStream stream = new MemoryStream(fileDetails.Data))
        {
            document = convertFromFormatProvider.Import(stream);
        }

        byte[] renderedBytes = null;
        using (MemoryStream ms = new MemoryStream())
        {
            convertToFormatProvider.Export(document, ms);
            renderedBytes = ms.ToArray();
        }

        return renderedBytes;
    }
}

<style>
    .demo-button {
        width: 240px;
        float: right;
    }

    .demo-section {
        max-width: 500px;
        padding-bottom: 80px;
    }

        .demo-section label {
            margin-left: 5px;
        }

    .fileName-label {
        width: 90px;
    }

    .image-wrapper {
        text-align: center;
        min-height: 300px;
        position: relative;
    }

        .image-wrapper img {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            margin: auto;
            bottom: 0;
        }

    .template-image {
        height: 300px;
        border: 1px solid #c9c9c9;
    }

    .custom-image {
        height: 180px;
    }

    .custom-radio-wrapper {
        float: right;
    }

    .visible-wrapper {
        display: block;
    }

    .hidden-wrapper {
        display: none;
    }
</style>